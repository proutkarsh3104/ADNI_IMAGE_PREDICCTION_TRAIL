{"metadata":{"kernelspec":{"name":"python3","display_name":"Python 3","language":"python"},"language_info":{"name":"python","version":"3.10.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"accelerator":"GPU","colab":{"gpuType":"T4","provenance":[]},"kaggle":{"accelerator":"gpu","dataSources":[{"sourceId":11247816,"sourceType":"datasetVersion","datasetId":7024985}],"dockerImageVersionId":30919,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# !pip install kaggle==1.5.12 tensorflow scikit-learn pandas matplotlib seaborn opencv-python pathlib numpy\n!mkdir -p ~/.kaggle\n!cp kaggle.json ~/.kaggle/\n!chmod 600 ~/.kaggle/kaggle.json\n!kaggle datasets download -d proutkarshtiwari/adni-images-for-alzheimer-detection -p /content/ --unzip\nprint(\"Kaggle dataset downloaded and unzipped (if uncommented).\")","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"5NXSFb5HcHzI","outputId":"42dfa207-9b91-4cc9-e599-6c056180f9ec","trusted":true,"execution":{"iopub.status.busy":"2025-04-05T11:23:29.591820Z","iopub.execute_input":"2025-04-05T11:23:29.592155Z","iopub.status.idle":"2025-04-05T11:23:37.355604Z","shell.execute_reply.started":"2025-04-05T11:23:29.592118Z","shell.execute_reply":"2025-04-05T11:23:37.354570Z"}},"outputs":[{"name":"stdout","text":"cp: cannot stat 'kaggle.json': No such file or directory\nchmod: cannot access '/root/.kaggle/kaggle.json': No such file or directory\nWarning: Looks like you're using an outdated API Version, please consider updating (server 1.7.4.2 / client 1.6.17)\nDataset URL: https://www.kaggle.com/datasets/proutkarshtiwari/adni-images-for-alzheimer-detection\nLicense(s): apache-2.0\nDownloading adni-images-for-alzheimer-detection.zip to /content\n 98%|████████████████████████████████████████▎| 483M/491M [00:02<00:00, 268MB/s]\n100%|█████████████████████████████████████████| 491M/491M [00:02<00:00, 236MB/s]\nKaggle dataset downloaded and unzipped (if uncommented).\n","output_type":"stream"}],"execution_count":1},{"cell_type":"code","source":"# Cell 1: Setup and Imports\n# ==========================\n\n# --- Optional: Kaggle Setup (Uncomment if running on Kaggle/downloading) ---\n# !pip install kaggle==1.5.12 tensorflow scikit-learn pandas matplotlib seaborn opencv-python pathlib numpy\n# !mkdir -p ~/.kaggle\n# !cp kaggle.json ~/.kaggle/\n# !chmod 600 ~/.kaggle/kaggle.json\n# !kaggle datasets download -d proutkarshtiwari/adni-images-for-alzheimer-detection -p /content/ --unzip\n# print(\"Kaggle dataset downloaded and unzipped (if uncommented).\")\n\n# --- Standard Imports ---\nimport os\nimport random\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport cv2\nfrom pathlib import Path\nfrom collections import Counter\nimport time  # To time operations\n\n# --- Scikit-learn Imports ---\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import classification_report, confusion_matrix\n# from sklearn.utils import class_weight # No longer needed for balanced data\n\n# --- TensorFlow Imports ---\nimport tensorflow as tf\nfrom tensorflow.keras import layers, models, applications, optimizers\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.keras.callbacks import EarlyStopping, ReduceLROnPlateau, ModelCheckpoint\nfrom tensorflow.keras.models import load_model\n\nprint(\"--- Imports completed ---\")\nprint(f\"TensorFlow Version: {tf.__version__}\")","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"8UBjQtTXg_Ue","outputId":"8e887634-41bf-464e-b629-4ec4f6d37352","trusted":true,"execution":{"iopub.status.busy":"2025-04-05T11:23:37.356957Z","iopub.execute_input":"2025-04-05T11:23:37.357347Z","iopub.status.idle":"2025-04-05T11:23:41.620636Z","shell.execute_reply.started":"2025-04-05T11:23:37.357309Z","shell.execute_reply":"2025-04-05T11:23:41.619569Z"}},"outputs":[{"name":"stdout","text":"--- Imports completed ---\nTensorFlow Version: 2.17.1\n","output_type":"stream"}],"execution_count":2},{"cell_type":"code","source":"# Cell 2: Configuration\n# ======================\nprint(\"--- Configuring Paths and Parameters ---\")\n\n# --- Environment Setup ---\n# << IMPORTANT >>: SET THESE PATHS ACCORDING TO YOUR ENVIRONMENT\n#                 The code expects BASE_INPUT_DIR to contain 'train.csv'\n#                 and the parent folder 'ADNI_IMAGES/png_images'.\n# Kaggle Example: BASE_INPUT_DIR = '/kaggle/input/adni-images-for-alzheimer-detection'\n# Colab Example: BASE_INPUT_DIR = '/content/' # Assuming dataset downloaded to /content/\n# Local Example (adjust drive/user):\n# BASE_INPUT_DIR = 'D:/adni_traininhig'\n# BASE_INPUT_DIR = 'C:/Users/YourUser/Downloads/adni-images-for-alzheimer-detection'\nBASE_INPUT_DIR = '/kaggle/input/adni-images-for-alzheimer-detection' # <<< SET YOUR PATH HERE\n\n# << IMPORTANT >>: SET WHERE YOU WANT TO SAVE MODELS\n# Colab Example (Drive): MODEL_SAVE_DIR = '/content/drive/MyDrive/AD_Models'\n# Kaggle Example: MODEL_SAVE_DIR = '/kaggle/working/'\n# Local Example: MODEL_SAVE_DIR = './adni_models'\nMODEL_SAVE_DIR = '/kaggle/working/' # <<< SET YOUR PATH HERE\n\nos.makedirs(MODEL_SAVE_DIR, exist_ok=True)\nprint(f\"Base Input Directory: {BASE_INPUT_DIR}\")\nprint(f\"Model Save Directory: {MODEL_SAVE_DIR}\")\n\n# --- Data Paths ---\nCSV_PATH = os.path.join(BASE_INPUT_DIR, 'train.csv')\nIMAGE_DIR_PARENT = os.path.join(BASE_INPUT_DIR, 'ADNI_IMAGES/png_images') # Parent dir containing class folders\nprint(f\"CSV Path: {CSV_PATH}\")\nprint(f\"Image Directory Parent: {IMAGE_DIR_PARENT}\")\n\n# --- Model & Training Params ---\nIMG_SIZE = (224, 224)\nBATCH_SIZE = 32\nNUM_CLASSES = 5\nSEED = 42\nINPUT_SHAPE = IMG_SIZE + (3,)\nTEST_SPLIT_SIZE = 0.15 # Use 15% for the final test set\nVALIDATION_SPLIT_SIZE = 0.20 # Use 20% *of the training data* for validation\n\n# Phase 1 (Feature Extraction / Head Training)\nEPOCHS_PHASE1 = 15          # Keep moderate, rely on EarlyStopping\nLEARNING_RATE_PHASE1 = 1e-3 # Standard LR for the head\n\n# Phase 2 (Fine-tuning)\nEPOCHS_PHASE2 = 40          # Increase slightly, but rely on EarlyStopping (was 30)\nLEARNING_RATE_PHASE2 = 1e-5 # Keep low LR for fine-tuning\nFINE_TUNE_AT_LAYER = 150    # Fine-tune from this ResNet layer index onwards (approx. last block)\n\n# Model Saving Paths\nMODEL_CHECKPOINT_PATH = os.path.join(MODEL_SAVE_DIR, 'resnet50v2_adni_best.keras')\nFINAL_MODEL_PATH = os.path.join(MODEL_SAVE_DIR, 'resnet50v2_adni_final.keras')\nprint(f\"Best model checkpoint path: {MODEL_CHECKPOINT_PATH}\")\nprint(f\"Final model save path: {FINAL_MODEL_PATH}\")\n\n# --- Class Mapping ---\ndiagnosis_mapping = {\n    0: 'CN', 1: 'MCI', 2: 'EMCI', 3: 'LMCI', 4: 'AD'\n}\nclass_names = list(diagnosis_mapping.values())\nprint(f\"Class Names: {class_names}\")\n\n# --- Reproducibility ---\nrandom.seed(SEED)\nnp.random.seed(SEED)\ntf.random.set_seed(SEED)\n# os.environ['TF_DETERMINISTIC_OPS'] = '1' # Try for more determinism\nprint(f\"Seeds set to: {SEED}\")\n\nprint(\"--- Configuration complete ---\")","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"5D009pnXgs1K","outputId":"fdd180ec-929c-4f0b-bcbe-f4c0d923fee9","trusted":true,"execution":{"iopub.status.busy":"2025-04-05T11:23:41.621746Z","iopub.execute_input":"2025-04-05T11:23:41.622335Z","iopub.status.idle":"2025-04-05T11:23:41.634264Z","shell.execute_reply.started":"2025-04-05T11:23:41.622293Z","shell.execute_reply":"2025-04-05T11:23:41.632752Z"}},"outputs":[{"name":"stdout","text":"--- Configuring Paths and Parameters ---\nBase Input Directory: /kaggle/input/adni-images-for-alzheimer-detection\nModel Save Directory: /kaggle/working/\nCSV Path: /kaggle/input/adni-images-for-alzheimer-detection/train.csv\nImage Directory Parent: /kaggle/input/adni-images-for-alzheimer-detection/ADNI_IMAGES/png_images\nBest model checkpoint path: /kaggle/working/resnet50v2_adni_best.keras\nFinal model save path: /kaggle/working/resnet50v2_adni_final.keras\nClass Names: ['CN', 'MCI', 'EMCI', 'LMCI', 'AD']\nSeeds set to: 42\n--- Configuration complete ---\n","output_type":"stream"}],"execution_count":3},{"cell_type":"code","source":"# Cell 3: GPU Check\n# ==================\nprint(\"\\n--- GPU Check ---\")\ngpu_devices = tf.config.list_physical_devices('GPU')\nprint(f\"Num GPUs Available: {len(gpu_devices)}\")\nif gpu_devices:\n    print(\"GPU is available. TensorFlow should use it automatically.\")\n    try:\n        for gpu in gpu_devices:\n            tf.config.experimental.set_memory_growth(gpu, True)\n        print(\"GPU memory growth enabled.\")\n    except RuntimeError as e:\n        print(f\"Could not set memory growth: {e}\")\nelse:\n    print(\"WARNING: No GPU detected. Training will be on CPU (might be very slow).\")\nprint(\"--- GPU Check complete ---\")","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"vI40GSB6hO_u","outputId":"6d7da30e-201a-48ad-c30d-03bb03606483","trusted":true,"execution":{"iopub.status.busy":"2025-04-05T11:23:41.638914Z","iopub.execute_input":"2025-04-05T11:23:41.639365Z","iopub.status.idle":"2025-04-05T11:23:43.060478Z","shell.execute_reply.started":"2025-04-05T11:23:41.639322Z","shell.execute_reply":"2025-04-05T11:23:43.059360Z"}},"outputs":[{"name":"stdout","text":"\n--- GPU Check ---\nNum GPUs Available: 1\nGPU is available. TensorFlow should use it automatically.\nGPU memory growth enabled.\n--- GPU Check complete ---\n","output_type":"stream"}],"execution_count":4},{"cell_type":"code","source":"# Cell 4: Load and Explore Metadata (EDA)\n# =========================================\nprint(\"\\n--- Loading and Exploring Metadata (EDA) ---\")\ndf = None # Initialize df\ntry:\n    start_time = time.time()\n    df = pd.read_csv(CSV_PATH)\n    end_time = time.time()\n    print(f\"CSV loaded successfully from {CSV_PATH} in {end_time - start_time:.2f} seconds.\")\n    print(f\"Dataset shape: {df.shape}\")\n    print(\"\\nDataset head:\")\n    print(df.head())\nexcept FileNotFoundError:\n    print(f\"ERROR: CSV file not found at {CSV_PATH}\")\n    print(\"Please ensure the dataset path is correct in the Configuration cell.\")\nexcept Exception as e:\n    print(f\"An error occurred while loading the CSV: {e}\")\n\nif df is not None:\n    print(\"\\nChecking for missing values...\")\n    print(df.isnull().sum())\n    if df.isnull().sum().sum() > 0:\n        print(\"Warning: Missing values found!\")\n        # Add handling here if needed (e.g., df = df.dropna())\n    else:\n        print(\"No missing values found in the metadata.\")\n\n    # Map diagnosis codes to human-readable names and create string version\n    df['class_name'] = df['diagnosis'].map(diagnosis_mapping)\n    df['diagnosis_str'] = df['diagnosis'].astype(str) # For ImageDataGenerator y_col\n    print(\"\\nAdded 'class_name' and 'diagnosis_str' columns.\")\n    print(df[['diagnosis', 'class_name', 'diagnosis_str']].head())\n\n    # --- Enhanced EDA: Class Distribution ---\n    print(\"\\nAnalyzing Class Distribution...\")\n    plt.figure(figsize=(12, 7))\n    class_counts = df['class_name'].value_counts().loc[class_names] # Ensure order matches class_names\n    sns.barplot(x=class_counts.index, y=class_counts.values, palette='viridis')\n    plt.title(f\"Distribution of Classes (Total: {len(df)})\")\n    plt.xlabel(\"Diagnosis Class\")\n    plt.ylabel(\"Count\")\n    plt.xticks(rotation=0)\n    # Add counts on top of bars\n    for index, value in enumerate(class_counts.values):\n        plt.text(index, value + 20, str(value), ha='center', va='bottom', fontsize=10)\n    plt.tight_layout()\n    plt.show()\n\n    print(\"\\nExact Class Counts:\")\n    print(class_counts)\n    # Check balance\n    min_count = class_counts.min()\n    max_count = class_counts.max()\n    print(f\"\\nMin samples per class: {min_count}\")\n    print(f\"Max samples per class: {max_count}\")\n    if max_count / min_count > 1.5: # Example threshold for imbalance\n        print(\"Note: Some class imbalance detected, but seems relatively minor based on the plot.\")\n        print(\"Class weights will NOT be used as per the analysis.\")\n    else:\n        print(\"Dataset classes appear well-balanced.\")\n        print(\"Class weights will NOT be used.\")\n\nelse:\n    print(\"\\nDataFrame 'df' could not be loaded. Skipping further EDA and processing.\")\n\nprint(\"--- EDA complete ---\")","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"zAklkO9FhWwD","outputId":"46a34154-a172-40b5-c23d-1fd0c550643b","trusted":true,"execution":{"iopub.status.busy":"2025-04-05T11:23:43.062054Z","iopub.execute_input":"2025-04-05T11:23:43.062340Z","iopub.status.idle":"2025-04-05T11:23:43.392506Z","shell.execute_reply.started":"2025-04-05T11:23:43.062317Z","shell.execute_reply":"2025-04-05T11:23:43.391532Z"}},"outputs":[{"name":"stdout","text":"\n--- Loading and Exploring Metadata (EDA) ---\nCSV loaded successfully from /kaggle/input/adni-images-for-alzheimer-detection/train.csv in 0.02 seconds.\nDataset shape: (20257, 2)\n\nDataset head:\n     id_code  diagnosis\n0    AD-3471          4\n1    CN-1819          0\n2  LMCI-0760          3\n3  LMCI-1810          3\n4    CN-4049          0\n\nChecking for missing values...\nid_code      0\ndiagnosis    0\ndtype: int64\nNo missing values found in the metadata.\n\nAdded 'class_name' and 'diagnosis_str' columns.\n   diagnosis class_name diagnosis_str\n0          4         AD             4\n1          0         CN             0\n2          3       LMCI             3\n3          3       LMCI             3\n4          0         CN             0\n\nAnalyzing Class Distribution...\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 1200x700 with 1 Axes>","image/png":"\n"},"metadata":{}},{"name":"stdout","text":"\nExact Class Counts:\nclass_name\nCN      4077\nMCI     4073\nEMCI    3958\nLMCI    4074\nAD      4075\nName: count, dtype: int64\n\nMin samples per class: 3958\nMax samples per class: 4077\nDataset classes appear well-balanced.\nClass weights will NOT be used.\n--- EDA complete ---\n","output_type":"stream"}],"execution_count":5},{"cell_type":"code","source":"# Cell 5: Construct and Verify Image Paths\n# ========================================\nprint(\"\\n--- Constructing and Verifying Image Paths ---\")\nif df is not None:\n    start_time = time.time()\n    print(\"Constructing image paths...\")\n    df['image_path'] = df.apply(\n        lambda row: os.path.join(IMAGE_DIR_PARENT, row['class_name'], f\"{row['id_code']}.png\"),\n        axis=1\n    )\n    end_time = time.time()\n    print(f\"Image paths constructed in {end_time - start_time:.2f} seconds.\")\n    print(\"\\nSample DataFrame with image paths:\")\n    print(df[['id_code', 'class_name', 'image_path']].head())\n\n    # Verify paths (start with a sample)\n    print(\"\\nVerifying a sample of image paths...\")\n    num_to_check = min(200, len(df)) # Check a larger sample\n    sample_paths = df['image_path'].sample(num_to_check, random_state=SEED)\n    missing_samples = sample_paths[~sample_paths.apply(os.path.exists)]\n\n    if not missing_samples.empty:\n         print(f\"WARNING: {len(missing_samples)} out of {num_to_check} sample image paths do not exist. Examples:\")\n         print(missing_samples.head())\n         print(\"\\nVerifying ALL paths (this might take time)...\")\n         start_time_full = time.time()\n         path_exists = df['image_path'].apply(os.path.exists)\n         missing_df = df[~path_exists]\n         end_time_full = time.time()\n         print(f\"Full path verification took {end_time_full - start_time_full:.2f} seconds.\")\n         if not missing_df.empty:\n             print(f\"ERROR: Found {len(missing_df)} total missing image paths!\")\n             print(\"Example missing paths:\")\n             print(missing_df[['id_code', 'image_path']].head(10))\n             # Raising error as missing images will break training\n             raise FileNotFoundError(f\"Missing image files found. Check IMAGE_DIR_PARENT: '{IMAGE_DIR_PARENT}' and CSV data integrity.\")\n         else:\n            print(\"Full verification passed. All constructed image paths are valid.\")\n    else:\n        print(f\"All {num_to_check} sample image paths are valid.\")\n        # Assuming if a decent sample is valid, all are likely valid (can add full check if needed)\n        # print(\"Assuming all paths are valid based on the sample check.\")\n\nelse:\n    print(\"DataFrame 'df' not loaded. Skipping path construction and verification.\")\n\nprint(\"--- Path Verification complete ---\")","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Av9CWkKbhgLF","outputId":"ddc134cd-f625-4b9d-c4e6-d0d3d04246b6","trusted":true,"execution":{"iopub.status.busy":"2025-04-05T11:23:43.393617Z","iopub.execute_input":"2025-04-05T11:23:43.393987Z","iopub.status.idle":"2025-04-05T11:23:43.940497Z","shell.execute_reply.started":"2025-04-05T11:23:43.393949Z","shell.execute_reply":"2025-04-05T11:23:43.939481Z"}},"outputs":[{"name":"stdout","text":"\n--- Constructing and Verifying Image Paths ---\nConstructing image paths...\nImage paths constructed in 0.21 seconds.\n\nSample DataFrame with image paths:\n     id_code class_name                                         image_path\n0    AD-3471         AD  /kaggle/input/adni-images-for-alzheimer-detect...\n1    CN-1819         CN  /kaggle/input/adni-images-for-alzheimer-detect...\n2  LMCI-0760       LMCI  /kaggle/input/adni-images-for-alzheimer-detect...\n3  LMCI-1810       LMCI  /kaggle/input/adni-images-for-alzheimer-detect...\n4    CN-4049         CN  /kaggle/input/adni-images-for-alzheimer-detect...\n\nVerifying a sample of image paths...\nAll 200 sample image paths are valid.\n--- Path Verification complete ---\n","output_type":"stream"}],"execution_count":6},{"cell_type":"code","source":"# Cell 5.5: Create Train/Test Split\n# ==================================\nprint(\"\\n--- Creating Train/Test Split ---\")\n\nif df is not None:\n    # Ensure 'diagnosis_str' exists for stratification\n    if 'diagnosis_str' not in df.columns:\n        print(\"ERROR: 'diagnosis_str' column not found. Please run Cell 4 again.\")\n        df_train, df_test = None, None # Prevent further execution\n    else:\n        print(f\"Splitting data: {(1-TEST_SPLIT_SIZE)*100:.1f}% train, {TEST_SPLIT_SIZE*100:.1f}% test\")\n        df_train, df_test = train_test_split(\n            df,\n            test_size=TEST_SPLIT_SIZE,\n            random_state=SEED,\n            stratify=df['diagnosis_str'] # Stratify to maintain class proportions\n        )\n        print(f\"Original DataFrame shape: {df.shape}\")\n        print(f\"Training DataFrame shape: {df_train.shape}\")\n        print(f\"Test DataFrame shape: {df_test.shape}\")\n\n        # Verify stratification (optional)\n        print(\"\\nTrain Class Distribution:\")\n        print(df_train['class_name'].value_counts(normalize=True).sort_index())\n        print(\"\\nTest Class Distribution:\")\n        print(df_test['class_name'].value_counts(normalize=True).sort_index())\nelse:\n    print(\"DataFrame 'df' not loaded. Cannot create split.\")\n    df_train, df_test = None, None\n\nprint(\"--- Train/Test Split complete ---\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-05T11:23:43.941558Z","iopub.execute_input":"2025-04-05T11:23:43.941908Z","iopub.status.idle":"2025-04-05T11:23:43.999625Z","shell.execute_reply.started":"2025-04-05T11:23:43.941861Z","shell.execute_reply":"2025-04-05T11:23:43.998533Z"}},"outputs":[{"name":"stdout","text":"\n--- Creating Train/Test Split ---\nSplitting data: 85.0% train, 15.0% test\nOriginal DataFrame shape: (20257, 5)\nTraining DataFrame shape: (17218, 5)\nTest DataFrame shape: (3039, 5)\n\nTrain Class Distribution:\nclass_name\nAD      0.201185\nCN      0.201243\nEMCI    0.195377\nLMCI    0.201127\nMCI     0.201069\nName: proportion, dtype: float64\n\nTest Class Distribution:\nclass_name\nAD      0.201053\nCN      0.201382\nEMCI    0.195459\nLMCI    0.201053\nMCI     0.201053\nName: proportion, dtype: float64\n--- Train/Test Split complete ---\n","output_type":"stream"}],"execution_count":7},{"cell_type":"code","source":"# Cell 6: Image Preprocessing Function & Test\n# ===========================================\nprint(\"\\n--- Defining Image Preprocessing Function ---\")\n\n# Note: Skull stripping could be added here as a more advanced step,\n# potentially using libraries like nipype, nilearn, or dedicated models,\n# but adds significant complexity. For now, we focus on standard resizing/color.\ndef preprocess_image(image_path, target_size=IMG_SIZE):\n    \"\"\"Reads, resizes, and converts BGR->RGB image.\"\"\"\n    try:\n        img = cv2.imread(str(image_path)) # Ensure path is string\n        if img is None:\n            # print(f\"Warning: Could not read image at {image_path}. Returning None.\")\n            return None\n        img = cv2.resize(img, target_size)\n        img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB) # Keras models expect RGB\n        # Normalization is now handled by ImageDataGenerator's rescale parameter\n        # img = img.astype(np.float32) / 255.0 # REMOVED\n        return img\n    except Exception as e:\n        print(f\"Error processing image {image_path}: {e}\")\n        return None\n\nprint(\"Preprocessing function defined.\")\n\n# --- Test the function ---\nprint(\"\\nTesting preprocessing function...\")\n# Test on the original df, as df_train/df_test might be None if loading failed\nif df is not None and not df.empty:\n    first_valid_path = None\n    for path in df['image_path']:\n        if os.path.exists(path):\n            first_valid_path = path\n            break\n\n    if first_valid_path:\n        print(f\"Processing sample image: {first_valid_path}\")\n        sample_img_processed = preprocess_image(first_valid_path)\n        if sample_img_processed is not None:\n            plt.figure(figsize=(6, 6))\n            # Display the image as is (it's now 0-255 uint8)\n            plt.imshow(sample_img_processed)\n            plt.title(\"Processed Sample Image (RGB, Resized)\")\n            plt.axis('off')\n            plt.show()\n            print(f\"Processed image shape: {sample_img_processed.shape}\")\n            print(f\"Processed image min value: {sample_img_processed.min()}\")\n            print(f\"Processed image max value: {sample_img_processed.max()}\")\n            print(f\"Processed image dtype: {sample_img_processed.dtype}\") # Should be uint8 now\n        else:\n            print(\"Preprocessing failed for the sample image.\")\n    else:\n        print(\"Could not find a valid image path in the dataframe to test preprocessing.\")\nelse:\n    print(\"DataFrame 'df' not available. Skipping preprocessing test.\")\n\nprint(\"--- Preprocessing setup complete ---\")","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":712},"id":"f_2ijLY0h3Sa","outputId":"9ee5da23-abd2-4495-a33d-3aac97c4c5cd","trusted":true,"execution":{"iopub.status.busy":"2025-04-05T11:23:44.000841Z","iopub.execute_input":"2025-04-05T11:23:44.001241Z","iopub.status.idle":"2025-04-05T11:23:44.217287Z","shell.execute_reply.started":"2025-04-05T11:23:44.001201Z","shell.execute_reply":"2025-04-05T11:23:44.216014Z"}},"outputs":[{"name":"stdout","text":"\n--- Defining Image Preprocessing Function ---\nPreprocessing function defined.\n\nTesting preprocessing function...\nProcessing sample image: /kaggle/input/adni-images-for-alzheimer-detection/ADNI_IMAGES/png_images/AD/AD-3471.png\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 600x600 with 1 Axes>","image/png":"\n"},"metadata":{}},{"name":"stdout","text":"Processed image shape: (224, 224, 3)\nProcessed image min value: 0\nProcessed image max value: 240\nProcessed image dtype: uint8\n--- Preprocessing setup complete ---\n","output_type":"stream"}],"execution_count":8},{"cell_type":"code","source":"# Cell 7: Data Augmentation and Generators\n# =======================================\nprint(\"\\n--- Setting up Data Augmentation and Generators ---\")\n\n# --- Augmentation Setup ---\n# Generator for Training data (with augmentation and validation split)\ntrain_datagen = ImageDataGenerator(\n    rescale=1./255,          # Normalize pixel values to [0, 1]\n    rotation_range=15,\n    width_shift_range=0.1,\n    height_shift_range=0.1,\n    shear_range=0.1,\n    zoom_range=0.1,\n    horizontal_flip=True,\n    brightness_range=[0.9, 1.1],\n    fill_mode='nearest',\n    validation_split=VALIDATION_SPLIT_SIZE # Use 20% of df_train for validation\n)\nprint(\"Train ImageDataGenerator configured with augmentation and rescaling.\")\n\n# Generator for Validation data (only rescaling and validation split)\nvalidation_datagen = ImageDataGenerator(\n    rescale=1./255,          # Normalize pixel values to [0, 1]\n    validation_split=VALIDATION_SPLIT_SIZE # Must match train_datagen\n)\nprint(\"Validation ImageDataGenerator configured (rescaling and validation_split).\")\n\n# Generator for Test data (only rescaling, no augmentation, no split)\ntest_datagen = ImageDataGenerator(\n    rescale=1./255           # Normalize pixel values to [0, 1]\n)\nprint(\"Test ImageDataGenerator configured (rescaling only).\")\n\n\n# --- Create Generators ---\ntrain_generator = None\nvalidation_generator = None\ntest_generator = None\n\n# Use df_train for training and validation sets\nif df_train is not None:\n    print(\"\\nCreating Train Generator (from df_train)...\")\n    start_time = time.time()\n    train_generator = train_datagen.flow_from_dataframe(\n        dataframe=df_train,\n        x_col='image_path',\n        y_col='diagnosis_str', # Target labels as strings for categorical\n        target_size=IMG_SIZE,\n        batch_size=BATCH_SIZE,\n        class_mode='categorical',\n        subset='training',      # Specify this subset\n        shuffle=True,\n        seed=SEED\n    )\n    end_time = time.time()\n    print(f\"Train Generator created in {end_time - start_time:.2f} seconds.\")\n\n\n    print(\"\\nCreating Validation Generator (from df_train)...\")\n    start_time = time.time()\n    validation_generator = validation_datagen.flow_from_dataframe(\n        dataframe=df_train,       # Use train dataframe\n        x_col='image_path',\n        y_col='diagnosis_str',\n        target_size=IMG_SIZE,\n        batch_size=BATCH_SIZE,\n        class_mode='categorical',\n        subset='validation',    # Specify this subset\n        shuffle=False           # No shuffle for validation\n        # seed=SEED # Seed not strictly needed if shuffle=False\n    )\n    end_time = time.time()\n    print(f\"Validation Generator created in {end_time - start_time:.2f} seconds.\")\n\nelse:\n    print(\"Training DataFrame ('df_train') not available. Cannot create train/validation generators.\")\n\n# Use df_test for the final test set\nif df_test is not None:\n    print(\"\\nCreating Test Generator (from df_test)...\")\n    start_time = time.time()\n    test_generator = test_datagen.flow_from_dataframe(\n        dataframe=df_test,        # Use test dataframe\n        x_col='image_path',\n        y_col='diagnosis_str',    # Still need labels for evaluation reference\n        target_size=IMG_SIZE,\n        batch_size=BATCH_SIZE,    # Can be same or different, but keep consistent for steps calculation if used\n        class_mode='categorical',\n        shuffle=False             # No shuffle for testing\n        # seed=SEED\n    )\n    end_time = time.time()\n    print(f\"Test Generator created in {end_time - start_time:.2f} seconds.\")\nelse:\n     print(\"Test DataFrame ('df_test') not available. Cannot create test generator.\")\n\n\n# Verify generator outputs (optional but recommended)\nif train_generator:\n    print(\"\\nVerifying generator output shapes and types...\")\n    sample_batch_x, sample_batch_y = next(train_generator)\n    print(f\"Sample train batch X shape: {sample_batch_x.shape}\")\n    print(f\"Sample train batch Y shape: {sample_batch_y.shape}\")\n    print(f\"Sample train batch X dtype: {sample_batch_x.dtype}\")\n    print(f\"Sample train batch Y dtype: {sample_batch_y.dtype}\")\n    print(f\"Sample train batch X min/max: {sample_batch_x.min():.4f}/{sample_batch_x.max():.4f}\") # Should be approx 0/1\nelse:\n    print(\"\\nTrain generator not available. Skipping output verification.\")\n\nprint(\"--- Data Generators setup complete ---\")","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"vuwU5dEqx-Gs","outputId":"1faa3cde-c12c-4e70-d991-fce350400d6a","trusted":true,"execution":{"iopub.status.busy":"2025-04-05T11:23:44.218434Z","iopub.execute_input":"2025-04-05T11:23:44.218847Z","iopub.status.idle":"2025-04-05T11:24:26.494230Z","shell.execute_reply.started":"2025-04-05T11:23:44.218808Z","shell.execute_reply":"2025-04-05T11:24:26.493197Z"}},"outputs":[{"name":"stdout","text":"\n--- Setting up Data Augmentation and Generators ---\nTrain ImageDataGenerator configured with augmentation and rescaling.\nValidation ImageDataGenerator configured (rescaling and validation_split).\nTest ImageDataGenerator configured (rescaling only).\n\nCreating Train Generator (from df_train)...\nFound 13775 validated image filenames belonging to 5 classes.\nTrain Generator created in 28.16 seconds.\n\nCreating Validation Generator (from df_train)...\nFound 3443 validated image filenames belonging to 5 classes.\nValidation Generator created in 8.05 seconds.\n\nCreating Test Generator (from df_test)...\nFound 3039 validated image filenames belonging to 5 classes.\nTest Generator created in 5.58 seconds.\n\nVerifying generator output shapes and types...\nSample train batch X shape: (32, 224, 224, 3)\nSample train batch Y shape: (32, 5)\nSample train batch X dtype: float32\nSample train batch Y dtype: float32\nSample train batch X min/max: 0.0000/1.0000\n--- Data Generators setup complete ---\n","output_type":"stream"}],"execution_count":9},{"cell_type":"code","source":"# Cell 8: Build the Model (Two-Phase Ready)\n# ==========================================\nprint(\"\\n--- Building Model ---\")\n\ndef build_resnet50v2_model(input_shape=INPUT_SHAPE, num_classes=NUM_CLASSES):\n    \"\"\"Builds a classification model using ResNet50V2 as the base.\"\"\"\n    print(f\"Building model with input shape {input_shape} and {num_classes} classes.\")\n    # Load base model pre-trained on ImageNet\n    print(\"Loading ResNet50V2 base model with ImageNet weights...\")\n    start_time = time.time()\n    base_model = applications.ResNet50V2(\n        weights='imagenet',\n        include_top=False,     # Exclude the original ImageNet classifier head\n        input_shape=input_shape\n    )\n    end_time = time.time()\n    print(f\"Base model loaded in {end_time - start_time:.2f} seconds.\")\n\n    # Build the full model\n    inputs = tf.keras.Input(shape=input_shape, name='input_layer')\n    # Set training=False for the base model initially (feature extraction phase)\n    # This prevents BatchNorm layers from updating their statistics during this phase\n    x = base_model(inputs, training=False)\n    print(\"Base model added (initially frozen).\")\n\n    # Custom classification head\n    print(\"Adding custom classification head...\")\n    x = layers.GlobalAveragePooling2D(name='avg_pool')(x)\n    x = layers.Dense(512, activation='relu', name='dense_head_1')(x)\n    x = layers.BatchNormalization(name='batch_norm_head_1')(x)\n    x = layers.Dropout(0.5, name='dropout_head_1')(x) # Regularization\n    outputs = layers.Dense(num_classes, activation='softmax', name='predictions')(x)\n    print(\"Output layer added.\")\n\n    model = models.Model(inputs, outputs, name='alzheimer_resnet50v2')\n    print(\"Model built successfully.\")\n\n    return model, base_model # Return both model and base_model reference\n\n# Build the initial model\nmodel, base_model = build_resnet50v2_model()\n\nprint(\"\\n--- Initial Model Summary (Base Frozen) ---\")\nmodel.summary() # Base model layers should show as non-trainable here\nprint(\"--- Model Building complete ---\")","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":577},"id":"kQcWL3X4jiS5","outputId":"8677f0e2-fa8d-4343-e467-c6453918531b","trusted":true,"execution":{"iopub.status.busy":"2025-04-05T11:24:26.495366Z","iopub.execute_input":"2025-04-05T11:24:26.495735Z","iopub.status.idle":"2025-04-05T11:24:29.064092Z","shell.execute_reply.started":"2025-04-05T11:24:26.495705Z","shell.execute_reply":"2025-04-05T11:24:29.063351Z"}},"outputs":[{"name":"stdout","text":"\n--- Building Model ---\nBuilding model with input shape (224, 224, 3) and 5 classes.\nLoading ResNet50V2 base model with ImageNet weights...\nBase model loaded in 2.51 seconds.\nBase model added (initially frozen).\nAdding custom classification head...\nOutput layer added.\nModel built successfully.\n\n--- Initial Model Summary (Base Frozen) ---\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"\u001b[1mModel: \"alzheimer_resnet50v2\"\u001b[0m\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"alzheimer_resnet50v2\"</span>\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━┓\n┃\u001b[1m \u001b[0m\u001b[1mLayer (type)                        \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape               \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m        Param #\u001b[0m\u001b[1m \u001b[0m┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━┩\n│ input_layer (\u001b[38;5;33mInputLayer\u001b[0m)             │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m224\u001b[0m, \u001b[38;5;34m224\u001b[0m, \u001b[38;5;34m3\u001b[0m)         │               \u001b[38;5;34m0\u001b[0m │\n├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n│ resnet50v2 (\u001b[38;5;33mFunctional\u001b[0m)              │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m7\u001b[0m, \u001b[38;5;34m7\u001b[0m, \u001b[38;5;34m2048\u001b[0m)          │      \u001b[38;5;34m23,564,800\u001b[0m │\n├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n│ avg_pool (\u001b[38;5;33mGlobalAveragePooling2D\u001b[0m)    │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m2048\u001b[0m)                │               \u001b[38;5;34m0\u001b[0m │\n├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n│ dense_head_1 (\u001b[38;5;33mDense\u001b[0m)                 │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m512\u001b[0m)                 │       \u001b[38;5;34m1,049,088\u001b[0m │\n├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n│ batch_norm_head_1                    │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m512\u001b[0m)                 │           \u001b[38;5;34m2,048\u001b[0m │\n│ (\u001b[38;5;33mBatchNormalization\u001b[0m)                 │                             │                 │\n├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n│ dropout_head_1 (\u001b[38;5;33mDropout\u001b[0m)             │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m512\u001b[0m)                 │               \u001b[38;5;34m0\u001b[0m │\n├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n│ predictions (\u001b[38;5;33mDense\u001b[0m)                  │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m5\u001b[0m)                   │           \u001b[38;5;34m2,565\u001b[0m │\n└──────────────────────────────────────┴─────────────────────────────┴─────────────────┘\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> Layer (type)                         </span>┃<span style=\"font-weight: bold\"> Output Shape                </span>┃<span style=\"font-weight: bold\">         Param # </span>┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━┩\n│ input_layer (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">InputLayer</span>)             │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">224</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">224</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">3</span>)         │               <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n│ resnet50v2 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Functional</span>)              │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">7</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">7</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">2048</span>)          │      <span style=\"color: #00af00; text-decoration-color: #00af00\">23,564,800</span> │\n├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n│ avg_pool (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">GlobalAveragePooling2D</span>)    │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">2048</span>)                │               <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n│ dense_head_1 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                 │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">512</span>)                 │       <span style=\"color: #00af00; text-decoration-color: #00af00\">1,049,088</span> │\n├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n│ batch_norm_head_1                    │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">512</span>)                 │           <span style=\"color: #00af00; text-decoration-color: #00af00\">2,048</span> │\n│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)                 │                             │                 │\n├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n│ dropout_head_1 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dropout</span>)             │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">512</span>)                 │               <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n│ predictions (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                  │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">5</span>)                   │           <span style=\"color: #00af00; text-decoration-color: #00af00\">2,565</span> │\n└──────────────────────────────────────┴─────────────────────────────┴─────────────────┘\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"\u001b[1m Total params: \u001b[0m\u001b[38;5;34m24,618,501\u001b[0m (93.91 MB)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">24,618,501</span> (93.91 MB)\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m24,572,037\u001b[0m (93.73 MB)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">24,572,037</span> (93.73 MB)\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m46,464\u001b[0m (181.50 KB)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">46,464</span> (181.50 KB)\n</pre>\n"},"metadata":{}},{"name":"stdout","text":"--- Model Building complete ---\n","output_type":"stream"}],"execution_count":10},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Cell 9: Compile and Train (Phase 1 - Head Training) - CORRECTED\n# =====================================================\nprint(\"\\n--- Training Phase 1: Feature Extraction (Train Head) ---\")\n\n# --- Configure Callbacks for Phase 1 ---\nprint(\"Configuring callbacks...\")\n# Use slightly different patience maybe, or reuse\nearly_stopping_p1 = EarlyStopping(monitor='val_loss', patience=5, verbose=1, restore_best_weights=True) # Shorter patience for head\nreduce_lr_p1 = ReduceLROnPlateau(monitor='val_loss', factor=0.2, patience=2, verbose=1, min_lr=1e-6) # Allow slightly higher min_lr\nmodel_checkpoint_p1 = ModelCheckpoint(MODEL_CHECKPOINT_PATH, monitor='val_accuracy', save_best_only=True, save_weights_only=False, verbose=1)\n\ncallbacks_phase1 = [early_stopping_p1, reduce_lr_p1, model_checkpoint_p1]\nprint(\"Callbacks configured for Phase 1.\")\n\n# --- Compile for Phase 1 ---\nprint(\"\\nCompiling model for Phase 1...\")\nbase_model.trainable = False # Ensure base is frozen\noptimizer_phase1 = optimizers.Adam(learning_rate=LEARNING_RATE_PHASE1)\nmodel.compile(\n    optimizer=optimizer_phase1,\n    loss='categorical_crossentropy',\n    metrics=['accuracy']\n)\nprint(\"Model compiled.\")\nprint(f\"Confirming base model trainable status: {base_model.trainable}\")\nprint(f\"Number of trainable weights in base model: {len(base_model.trainable_weights)}\") # Should be 0\n\n# --- Train Phase 1 ---\nhistory_phase1 = None\nif train_generator and validation_generator:\n    print(\"\\nStarting Phase 1 training...\")\n    start_time = time.time()\n    history_phase1 = model.fit(\n        train_generator,\n        epochs=EPOCHS_PHASE1,\n        validation_data=validation_generator,\n        callbacks=callbacks_phase1,\n        # class_weight=class_weights_dict, # REMOVED\n        # REMOVE steps_per_epoch=max(1, train_generator.samples // BATCH_SIZE),\n        # REMOVE validation_steps=max(1, validation_generator.samples // BATCH_SIZE)\n        # Let Keras infer the steps from the generator length\n    )\n    end_time = time.time()\n    print(f\"--- Phase 1 training finished in {(end_time - start_time)/60:.2f} minutes ---\")\nelse:\n    print(\"Generators not available. Skipping Phase 1 training.\")\n\nprint(\"--- Phase 1 complete ---\")","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"BF5pgxrnkfX_","outputId":"b957cd99-0eab-4de8-ebe2-0e7688e526e5","trusted":true,"execution":{"iopub.status.busy":"2025-04-05T11:24:29.065127Z","iopub.execute_input":"2025-04-05T11:24:29.065521Z"}},"outputs":[{"name":"stdout","text":"\n--- Training Phase 1: Feature Extraction (Train Head) ---\nConfiguring callbacks...\nCallbacks configured for Phase 1.\n\nCompiling model for Phase 1...\nModel compiled.\nConfirming base model trainable status: False\nNumber of trainable weights in base model: 0\n\nStarting Phase 1 training...\nEpoch 1/15\n","output_type":"stream"},{"name":"stderr","text":"/usr/local/lib/python3.10/dist-packages/keras/src/trainers/data_adapters/py_dataset_adapter.py:122: UserWarning: Your `PyDataset` class should call `super().__init__(**kwargs)` in its constructor. `**kwargs` can include `workers`, `use_multiprocessing`, `max_queue_size`. Do not pass these arguments to `fit()`, as they will be ignored.\n  self._warn_if_super_not_called()\n","output_type":"stream"},{"name":"stdout","text":"\u001b[1m430/431\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 565ms/step - accuracy: 0.3639 - loss: 1.7990\nEpoch 1: val_accuracy improved from -inf to 0.51322, saving model to /kaggle/working/resnet50v2_adni_best.keras\n\u001b[1m431/431\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m286s\u001b[0m 626ms/step - accuracy: 0.3641 - loss: 1.7978 - val_accuracy: 0.5132 - val_loss: 1.1618 - learning_rate: 0.0010\nEpoch 2/15\n\u001b[1m430/431\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 451ms/step - accuracy: 0.4648 - loss: 1.2467\nEpoch 2: val_accuracy improved from 0.51322 to 0.52977, saving model to /kaggle/working/resnet50v2_adni_best.keras\n\u001b[1m431/431\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m207s\u001b[0m 473ms/step - accuracy: 0.4648 - loss: 1.2466 - val_accuracy: 0.5298 - val_loss: 1.0841 - learning_rate: 0.0010\nEpoch 3/15\n\u001b[1m430/431\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 440ms/step - accuracy: 0.5122 - loss: 1.1230\nEpoch 3: val_accuracy did not improve from 0.52977\n\u001b[1m431/431\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m200s\u001b[0m 457ms/step - accuracy: 0.5122 - loss: 1.1229 - val_accuracy: 0.4970 - val_loss: 1.1337 - learning_rate: 0.0010\nEpoch 4/15\n\u001b[1m 41/431\u001b[0m \u001b[32m━\u001b[0m\u001b[37m━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[1m2:54\u001b[0m 448ms/step - accuracy: 0.5366 - loss: 1.0336","output_type":"stream"}],"execution_count":null},{"cell_type":"code","source":"# Cell 10: Compile and Train (Phase 2 - Fine-Tuning)\n# ===================================================\nprint(\"\\n--- Training Phase 2: Fine-Tuning ---\")\n\n# --- Load Best Weights from Phase 1 ---\nprint(f\"\\nLoading best model from Phase 1 checkpoint: {MODEL_CHECKPOINT_PATH}\")\n# Keep track if loading succeeded for conditional execution later\nmodel_loaded_successfully = False\nif os.path.exists(MODEL_CHECKPOINT_PATH):\n    try:\n        # Load the whole model saved by ModelCheckpoint\n        model = load_model(MODEL_CHECKPOINT_PATH)\n        # Re-establish reference to the base model layer\n        base_model_layer_found = False\n        for layer in model.layers:\n             # Use the actual name Keras likely assigned\n             if layer.name == base_model.name: # Find by name\n                 base_model = layer\n                 base_model_layer_found = True\n                 print(f\"Base model layer '{base_model.name}' found.\")\n                 break\n        if not base_model_layer_found:\n             print(f\"Warning: Could not find layer named '{base_model.name}'. This might affect fine-tuning.\")\n             # Attempt fallback if structure is known (less robust)\n             # base_model = model.layers[1]\n\n        print(\"Best model from Phase 1 loaded successfully.\")\n        model_loaded_successfully = True\n\n    except Exception as e:\n        print(f\"Could not load best weights from {MODEL_CHECKPOINT_PATH}. Error: {e}\")\n        print(\"Proceeding with current weights (end of Phase 1).\")\n        # Ensure base_model reference is still valid if loading failed but model object exists\n        if 'model' not in locals() or not hasattr(model, 'layers'):\n             print(\"ERROR: Cannot proceed without a valid model object.\")\n             model = None # Prevent further execution\n        model_loaded_successfully = False # Mark as not loaded from checkpoint\nelse:\n    print(f\"Checkpoint file not found at {MODEL_CHECKPOINT_PATH}. Cannot load best weights.\")\n    print(\"Proceeding with current weights (end of Phase 1), if available.\")\n    if 'model' not in locals():\n         print(\"ERROR: Cannot proceed without a valid model object.\")\n         model = None\n    model_loaded_successfully = False # Mark as not loaded from checkpoint\n\n\n# --- Configure Callbacks for Phase 2 ---\n# Increase patience slightly for fine-tuning\nearly_stopping_p2 = EarlyStopping(monitor='val_loss', patience=8, verbose=1, restore_best_weights=True)\nreduce_lr_p2 = ReduceLROnPlateau(monitor='val_loss', factor=0.2, patience=3, verbose=1, min_lr=1e-7)\n# Checkpoint saves the best model found across BOTH phases if loading worked\nmodel_checkpoint_p2 = ModelCheckpoint(MODEL_CHECKPOINT_PATH, monitor='val_accuracy', save_best_only=True, save_weights_only=False, verbose=1)\n\ncallbacks_phase2 = [early_stopping_p2, reduce_lr_p2, model_checkpoint_p2]\nprint(\"\\nCallbacks configured for Phase 2.\")\n\n\n# --- Compile for Phase 2 ---\nhistory_phase2 = None\n# Proceed only if model exists, generators exist, and phase 1 history exists (meaning phase 1 ran)\nif model and train_generator and validation_generator and history_phase1:\n    print(\"\\nUnfreezing layers for fine-tuning...\")\n    base_model.trainable = True # Unfreeze the base model first\n\n    # Freeze layers *before* FINE_TUNE_AT_LAYER\n    print(f\"Fine-tuning from layer index {FINE_TUNE_AT_LAYER} ('{base_model.layers[FINE_TUNE_AT_LAYER].name}') onwards.\")\n    for layer in base_model.layers[:FINE_TUNE_AT_LAYER]:\n       layer.trainable = False\n\n    print(\"\\nRe-compiling model for Phase 2 with low learning rate...\")\n    optimizer_phase2 = optimizers.Adam(learning_rate=LEARNING_RATE_PHASE2) # Very low LR\n    model.compile(\n        optimizer=optimizer_phase2,\n        loss='categorical_crossentropy',\n        metrics=['accuracy']\n    )\n    print(\"Model re-compiled.\")\n    print(f\"Confirming base model trainable status: {base_model.trainable}\")\n    # Count trainable weights AFTER recompiling and setting layer trainability\n    trainable_count = np.sum([K.count_params(w) for w in model.trainable_weights])\n    non_trainable_count = np.sum([K.count_params(w) for w in model.non_trainable_weights])\n    print(f\"Total Trainable params: {trainable_count}\")\n    print(f\"Total Non-trainable params: {non_trainable_count}\")\n\n\n    # --- Train Phase 2 ---\n    print(\"\\nStarting Phase 2 training (fine-tuning)...\")\n    start_time = time.time()\n    # Determine starting epoch\n    initial_epoch_p2 = len(history_phase1.epoch) if history_phase1 else 0 # Number of epochs completed in Phase 1\n    total_epochs = initial_epoch_p2 + EPOCHS_PHASE2\n    print(f\"Continuing training from epoch {initial_epoch_p2} up to {total_epochs}\")\n\n    history_phase2 = model.fit(\n        train_generator,\n        epochs=total_epochs,                      # Total epochs to reach\n        initial_epoch=initial_epoch_p2,           # Start from here\n        validation_data=validation_generator,\n        callbacks=callbacks_phase2\n        # class_weight=class_weights_dict, # Not using class weights\n    )\n    end_time = time.time()\n    print(f\"--- Phase 2 training finished in {(end_time - start_time)/60:.2f} minutes ---\")\n\nelif not history_phase1:\n     print(\"Phase 1 history not available. Skipping Phase 2 training.\")\nelse:\n    print(\"Model or generators not available. Skipping Phase 2 training.\")\n\nprint(\"--- Phase 2 complete ---\")","metadata":{"id":"AtANMazOkxTb"},"outputs":[{"name":"stdout","output_type":"stream","text":["\n","--- Training Phase 2: Fine-Tuning ---\n","\n","Loading best model from Phase 1 checkpoint: D:/adni_traininhig\\resnet50v2_adni_best.keras\n","Best model from Phase 1 loaded successfully.\n","\n","Callbacks configured for Phase 2.\n","\n","Unfreezing base model layers for fine-tuning...\n","\n","Re-compiling model for Phase 2 with low learning rate...\n","Model re-compiled.\n","Confirming base model trainable status: True\n","Number of trainable weights in base model: 172\n","\n","Starting Phase 2 training (fine-tuning)...\n","Continuing training from epoch 15\n","Epoch 16/45\n","507/507 [==============================] - ETA: 0s - loss: 0.8070 - accuracy: 0.6312\n","Epoch 16: val_accuracy improved from -inf to 0.65934, saving model to D:/adni_traininhig\\resnet50v2_adni_best.keras\n","507/507 [==============================] - 165s 315ms/step - loss: 0.8070 - accuracy: 0.6312 - val_loss: 0.6534 - val_accuracy: 0.6593 - lr: 1.0000e-05\n","Epoch 17/45\n","507/507 [==============================] - ETA: 0s - loss: 0.6077 - accuracy: 0.7028\n","Epoch 17: val_accuracy improved from 0.65934 to 0.69119, saving model to D:/adni_traininhig\\resnet50v2_adni_best.keras\n","507/507 [==============================] - 143s 281ms/step - loss: 0.6077 - accuracy: 0.7028 - val_loss: 0.5415 - val_accuracy: 0.6912 - lr: 1.0000e-05\n","Epoch 18/45\n","507/507 [==============================] - ETA: 0s - loss: 0.5129 - accuracy: 0.7308\n","Epoch 18: val_accuracy did not improve from 0.69119\n","507/507 [==============================] - 147s 290ms/step - loss: 0.5129 - accuracy: 0.7308 - val_loss: 0.5735 - val_accuracy: 0.6870 - lr: 1.0000e-05\n","Epoch 19/45\n","507/507 [==============================] - ETA: 0s - loss: 0.4486 - accuracy: 0.7553\n","Epoch 19: val_accuracy improved from 0.69119 to 0.73636, saving model to D:/adni_traininhig\\resnet50v2_adni_best.keras\n","507/507 [==============================] - 158s 312ms/step - loss: 0.4486 - accuracy: 0.7553 - val_loss: 0.4281 - val_accuracy: 0.7364 - lr: 1.0000e-05\n","Epoch 20/45\n","507/507 [==============================] - ETA: 0s - loss: 0.4079 - accuracy: 0.7691\n","Epoch 20: val_accuracy improved from 0.73636 to 0.75660, saving model to D:/adni_traininhig\\resnet50v2_adni_best.keras\n","507/507 [==============================] - 159s 312ms/step - loss: 0.4079 - accuracy: 0.7691 - val_loss: 0.3631 - val_accuracy: 0.7566 - lr: 1.0000e-05\n","Epoch 21/45\n","507/507 [==============================] - ETA: 0s - loss: 0.3830 - accuracy: 0.7718\n","Epoch 21: val_accuracy did not improve from 0.75660\n","507/507 [==============================] - 148s 292ms/step - loss: 0.3830 - accuracy: 0.7718 - val_loss: 0.4222 - val_accuracy: 0.7341 - lr: 1.0000e-05\n","Epoch 22/45\n","507/507 [==============================] - ETA: 0s - loss: 0.3640 - accuracy: 0.7878\n","Epoch 22: val_accuracy improved from 0.75660 to 0.76993, saving model to D:/adni_traininhig\\resnet50v2_adni_best.keras\n","507/507 [==============================] - 142s 279ms/step - loss: 0.3640 - accuracy: 0.7878 - val_loss: 0.3337 - val_accuracy: 0.7699 - lr: 1.0000e-05\n","Epoch 23/45\n","507/507 [==============================] - ETA: 0s - loss: 0.3489 - accuracy: 0.7853\n","Epoch 23: val_accuracy did not improve from 0.76993\n","507/507 [==============================] - 141s 278ms/step - loss: 0.3489 - accuracy: 0.7853 - val_loss: 0.3245 - val_accuracy: 0.7645 - lr: 1.0000e-05\n","Epoch 24/45\n","507/507 [==============================] - ETA: 0s - loss: 0.3381 - accuracy: 0.7859\n","Epoch 24: val_accuracy did not improve from 0.76993\n","507/507 [==============================] - 142s 280ms/step - loss: 0.3381 - accuracy: 0.7859 - val_loss: 0.3543 - val_accuracy: 0.7551 - lr: 1.0000e-05\n","Epoch 25/45\n","507/507 [==============================] - ETA: 0s - loss: 0.3340 - accuracy: 0.7888\n","Epoch 25: val_accuracy did not improve from 0.76993\n","507/507 [==============================] - 143s 283ms/step - loss: 0.3340 - accuracy: 0.7888 - val_loss: 0.3124 - val_accuracy: 0.7685 - lr: 1.0000e-05\n","Epoch 26/45\n","507/507 [==============================] - ETA: 0s - loss: 0.3228 - accuracy: 0.7950\n","Epoch 26: val_accuracy did not improve from 0.76993\n","507/507 [==============================] - 142s 280ms/step - loss: 0.3228 - accuracy: 0.7950 - val_loss: 0.3232 - val_accuracy: 0.7682 - lr: 1.0000e-05\n","Epoch 27/45\n","507/507 [==============================] - ETA: 0s - loss: 0.3188 - accuracy: 0.7933\n","Epoch 27: val_accuracy improved from 0.76993 to 0.77043, saving model to D:/adni_traininhig\\resnet50v2_adni_best.keras\n","507/507 [==============================] - 144s 284ms/step - loss: 0.3188 - accuracy: 0.7933 - val_loss: 0.3144 - val_accuracy: 0.7704 - lr: 1.0000e-05\n","Epoch 28/45\n","507/507 [==============================] - ETA: 0s - loss: 0.3155 - accuracy: 0.7887\n","Epoch 28: val_accuracy did not improve from 0.77043\n","507/507 [==============================] - 157s 310ms/step - loss: 0.3155 - accuracy: 0.7887 - val_loss: 0.3113 - val_accuracy: 0.7704 - lr: 1.0000e-05\n","Epoch 29/45\n","507/507 [==============================] - ETA: 0s - loss: 0.3204 - accuracy: 0.7895\n","Epoch 29: val_accuracy did not improve from 0.77043\n","507/507 [==============================] - 154s 303ms/step - loss: 0.3204 - accuracy: 0.7895 - val_loss: 0.3135 - val_accuracy: 0.7628 - lr: 1.0000e-05\n","Epoch 30/45\n","507/507 [==============================] - ETA: 0s - loss: 0.3056 - accuracy: 0.7930\n","Epoch 30: val_accuracy did not improve from 0.77043\n","507/507 [==============================] - 144s 284ms/step - loss: 0.3056 - accuracy: 0.7930 - val_loss: 0.3090 - val_accuracy: 0.7640 - lr: 1.0000e-05\n","Epoch 31/45\n","507/507 [==============================] - ETA: 0s - loss: 0.3129 - accuracy: 0.7946\n","Epoch 31: val_accuracy did not improve from 0.77043\n","507/507 [==============================] - 145s 286ms/step - loss: 0.3129 - accuracy: 0.7946 - val_loss: 0.3004 - val_accuracy: 0.7672 - lr: 1.0000e-05\n","Epoch 32/45\n","507/507 [==============================] - ETA: 0s - loss: 0.3025 - accuracy: 0.7983\n","Epoch 32: val_accuracy did not improve from 0.77043\n","507/507 [==============================] - 136s 268ms/step - loss: 0.3025 - accuracy: 0.7983 - val_loss: 0.3202 - val_accuracy: 0.7643 - lr: 1.0000e-05\n","Epoch 33/45\n","507/507 [==============================] - ETA: 0s - loss: 0.3012 - accuracy: 0.7964\n","Epoch 33: val_accuracy improved from 0.77043 to 0.77117, saving model to D:/adni_traininhig\\resnet50v2_adni_best.keras\n","507/507 [==============================] - 162s 319ms/step - loss: 0.3012 - accuracy: 0.7964 - val_loss: 0.3095 - val_accuracy: 0.7712 - lr: 1.0000e-05\n","Epoch 34/45\n","507/507 [==============================] - ETA: 0s - loss: 0.3068 - accuracy: 0.7944\n","Epoch 34: val_accuracy improved from 0.77117 to 0.77314, saving model to D:/adni_traininhig\\resnet50v2_adni_best.keras\n","507/507 [==============================] - 163s 322ms/step - loss: 0.3068 - accuracy: 0.7944 - val_loss: 0.2953 - val_accuracy: 0.7731 - lr: 1.0000e-05\n","Epoch 35/45\n","507/507 [==============================] - ETA: 0s - loss: 0.3006 - accuracy: 0.7927\n","Epoch 35: val_accuracy did not improve from 0.77314\n","507/507 [==============================] - 162s 319ms/step - loss: 0.3006 - accuracy: 0.7927 - val_loss: 0.3075 - val_accuracy: 0.7694 - lr: 1.0000e-05\n","Epoch 36/45\n","507/507 [==============================] - ETA: 0s - loss: 0.3016 - accuracy: 0.8013\n","Epoch 36: val_accuracy did not improve from 0.77314\n","507/507 [==============================] - 164s 324ms/step - loss: 0.3016 - accuracy: 0.8013 - val_loss: 0.3209 - val_accuracy: 0.7689 - lr: 1.0000e-05\n","Epoch 37/45\n","507/507 [==============================] - ETA: 0s - loss: 0.3046 - accuracy: 0.7967\n","Epoch 37: val_accuracy did not improve from 0.77314\n","507/507 [==============================] - 165s 324ms/step - loss: 0.3046 - accuracy: 0.7967 - val_loss: 0.2889 - val_accuracy: 0.7726 - lr: 1.0000e-05\n","Epoch 38/45\n","507/507 [==============================] - ETA: 0s - loss: 0.2968 - accuracy: 0.7976\n","Epoch 38: val_accuracy did not improve from 0.77314\n","507/507 [==============================] - 162s 319ms/step - loss: 0.2968 - accuracy: 0.7976 - val_loss: 0.3064 - val_accuracy: 0.7685 - lr: 1.0000e-05\n","Epoch 39/45\n","507/507 [==============================] - ETA: 0s - loss: 0.2959 - accuracy: 0.7932\n","Epoch 39: val_accuracy did not improve from 0.77314\n","507/507 [==============================] - 143s 282ms/step - loss: 0.2959 - accuracy: 0.7932 - val_loss: 0.3084 - val_accuracy: 0.7618 - lr: 1.0000e-05\n","Epoch 40/45\n","507/507 [==============================] - ETA: 0s - loss: 0.3014 - accuracy: 0.7933\n","Epoch 40: ReduceLROnPlateau reducing learning rate to 1.9999999494757505e-06.\n","\n","Epoch 40: val_accuracy improved from 0.77314 to 0.77783, saving model to D:/adni_traininhig\\resnet50v2_adni_best.keras\n","507/507 [==============================] - 161s 318ms/step - loss: 0.3014 - accuracy: 0.7933 - val_loss: 0.2927 - val_accuracy: 0.7778 - lr: 1.0000e-05\n","Epoch 41/45\n","507/507 [==============================] - ETA: 0s - loss: 0.2872 - accuracy: 0.8009\n","Epoch 41: val_accuracy did not improve from 0.77783\n","507/507 [==============================] - 185s 364ms/step - loss: 0.2872 - accuracy: 0.8009 - val_loss: 0.2843 - val_accuracy: 0.7776 - lr: 2.0000e-06\n","Epoch 42/45\n","507/507 [==============================] - ETA: 0s - loss: 0.2850 - accuracy: 0.7991\n","Epoch 42: val_accuracy did not improve from 0.77783\n","507/507 [==============================] - 181s 357ms/step - loss: 0.2850 - accuracy: 0.7991 - val_loss: 0.2860 - val_accuracy: 0.7761 - lr: 2.0000e-06\n","Epoch 43/45\n","507/507 [==============================] - ETA: 0s - loss: 0.2852 - accuracy: 0.8025\n","Epoch 43: val_accuracy did not improve from 0.77783\n","507/507 [==============================] - 172s 339ms/step - loss: 0.2852 - accuracy: 0.8025 - val_loss: 0.2846 - val_accuracy: 0.7749 - lr: 2.0000e-06\n","Epoch 44/45\n","507/507 [==============================] - ETA: 0s - loss: 0.2852 - accuracy: 0.8000\n","Epoch 44: val_accuracy did not improve from 0.77783\n","507/507 [==============================] - 168s 330ms/step - loss: 0.2852 - accuracy: 0.8000 - val_loss: 0.2837 - val_accuracy: 0.7704 - lr: 2.0000e-06\n","Epoch 45/45\n","507/507 [==============================] - ETA: 0s - loss: 0.2838 - accuracy: 0.8046\n","Epoch 45: val_accuracy did not improve from 0.77783\n","507/507 [==============================] - 165s 326ms/step - loss: 0.2838 - accuracy: 0.8046 - val_loss: 0.2831 - val_accuracy: 0.7726 - lr: 2.0000e-06\n","--- Phase 2 training finished in 77.76 minutes ---\n","--- Phase 2 complete ---\n"]}],"execution_count":11},{"cell_type":"code","source":"# Cell 11: Plot Training History (Combined)\n# ==========================================\nprint(\"\\n--- Plotting Training History ---\")\n\n# Combine histories if both phases ran\nif history_phase1 and history_phase2:\n    print(\"Plotting combined history for Phase 1 and Phase 2.\")\n    combined_history = {}\n    for key in history_phase1.history.keys():\n        combined_history[key] = history_phase1.history[key] + history_phase2.history[key]\n\n    epochs_phase1_actual = len(history_phase1.history['loss'])\n    epochs_total = len(combined_history['loss'])\n    epoch_range = range(epochs_total)\n\n    plt.figure(figsize=(14, 6))\n\n    # Loss Plot\n    plt.subplot(1, 2, 1)\n    plt.plot(epoch_range, combined_history['loss'], label='Train Loss', marker='.')\n    plt.plot(epoch_range, combined_history['val_loss'], label='Validation Loss', marker='.')\n    plt.axvline(x=epochs_phase1_actual - 1, color='r', linestyle='--', label='Start Fine-Tuning')\n    plt.title(\"Model Loss (Phases 1 & 2)\")\n    plt.xlabel(\"Epoch\")\n    plt.ylabel(\"Loss\")\n    plt.legend()\n    plt.grid(True)\n\n    # Accuracy Plot\n    plt.subplot(1, 2, 2)\n    plt.plot(epoch_range, combined_history['accuracy'], label='Train Accuracy', marker='.')\n    plt.plot(epoch_range, combined_history['val_accuracy'], label='Validation Accuracy', marker='.')\n    plt.axvline(x=epochs_phase1_actual - 1, color='r', linestyle='--', label='Start Fine-Tuning')\n    plt.title(\"Model Accuracy (Phases 1 & 2)\")\n    plt.xlabel(\"Epoch\")\n    plt.ylabel(\"Accuracy\")\n    plt.legend()\n    plt.grid(True)\n\n    plt.tight_layout()\n    plt.show()\n\nelif history_phase1: # Only phase 1 completed\n     print(\"Plotting history for Phase 1 only.\")\n     epochs_phase1_actual = len(history_phase1.history['loss'])\n     epoch_range = range(epochs_phase1_actual)\n     plt.figure(figsize=(14, 6))\n\n     plt.subplot(1, 2, 1)\n     plt.plot(epoch_range, history_phase1.history['loss'], label='Train Loss', marker='.')\n     plt.plot(epoch_range, history_phase1.history['val_loss'], label='Validation Loss', marker='.')\n     plt.title(\"Model Loss (Phase 1)\")\n     plt.xlabel(\"Epoch\")\n     plt.ylabel(\"Loss\")\n     plt.legend()\n     plt.grid(True)\n\n     plt.subplot(1, 2, 2)\n     plt.plot(epoch_range, history_phase1.history['accuracy'], label='Train Accuracy', marker='.')\n     plt.plot(epoch_range, history_phase1.history['val_accuracy'], label='Validation Accuracy', marker='.')\n     plt.title(\"Model Accuracy (Phase 1)\")\n     plt.xlabel(\"Epoch\")\n     plt.ylabel(\"Accuracy\")\n     plt.legend()\n     plt.grid(True)\n\n     plt.tight_layout()\n     plt.show()\nelse:\n    print(\"No training history available to plot.\")\n\nprint(\"--- History Plotting complete ---\")","metadata":{"id":"wu-7nKWok2CH"},"outputs":[{"name":"stdout","output_type":"stream","text":["\n","--- Plotting Training History ---\n","Plotting combined history for Phase 1 and Phase 2.\n"]},{"data":{"image/png":"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oAHr1q3j9OnTvPbaawwcOJDDhw9nuZ758+fTsGFDjh8/zqhRo3jjjTc4f/58rvp069YtunfvTr169Th+/DiLFi1i8eLFzJo1C1CzCfv378/QoUM5d+4cu3btonfv3iiKQlJSEr169aJ169b8999/HDx4kNdeey13I6YLkYG8OPdbfrqLVUdDSu25v2rVKqpWrUrVqlUZMGAAS5cuNdm39evX07t3b7p168bx48fZvn07DRs2NL4+aNAgVq5cyRdffMG5c+f49ttvsbOzy9H+X758md9++40///yTEydOAGpAefz48QQGBrJ9+3a0Wi3PP/88BoMBgOjoaFq3bs3t27f5559/OHnyJBMmTMBgMODn50f79u1ZunSpyXaWLl3KkCFD5HeQEEIIUcCkVIIQQghRisXpk6kxdfNTrcOgwJS/zzDl7zM5Wu7szE7YWOTNpcjYsWNNMtkA3n33XeP0mDFj2LRpE7///jtNmjTJdD1du3Zl1KhRgBoQWrBgAbt27aJatWo57tM333yDj48Pc+fOxdHRkRo1anD79m0mTpzI1KlTCQkJISkpid69e+Pr6wtAQEAAAA8ePCAiIoLu3btTsWJFAKpXr57jPgiRmbw69+dsvcKcrVdytFxJOfcXL17MgAEDAOjcuTPR0dFs376d9u3bA/DRRx/x0ksvMWPGDOMyderUAeDixYv89ttvbN261di+QoUKOdl1ABITE1mxYgVubm7GeX369EnXT3d3d86ePUutWrX45ZdfuHfvHoGBgcayEZUqVTK2Hz58OCNHjuSzzz7D0tKSkydPcuLECVavXp3j/gkhhBDi6UjGrRBCCCGKvdRZbADJycl89NFH1K5dGxcXF+zs7NiyZQvBwcFZrqd27drG6ZTbsu/evZurPp07d46mTZuaZKi1aNGC6Ohobt68SZ06dWjXrh0BAQG88MILfP/99zx8+BBQa3AOGTKETp060aNHDz7//HOTep9CCFVhnfsXLlzg33//5aWXXgLAzMyMfv36sWTJEmObEydO0K5duwyXP3HiBDqdjtatWz9xH7Pi6+trErQFCAoK4uWXX6ZChQo4ODjg7+8PYHwPTpw4Qb169TKt9durVy/MzMz466+/ALWOb9u2bfHz83uqvgohhBAi5yTjtgCERMRzKUJDSEQ85V1lwAAhhBBFh7W5jrMzO+VomdCIeNp/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duzIRx99VL8nLSIiIiJNmvq4IiJ1Q8GtiIgPe/TRR7n55pv57rvv+OUvf8kvfvELtm/fDkBhYSGjR4+mefPmrF+/ngULFvDll196dFrnzp3LPffcw29+8xtSU1P56KOP6NChg8cxZs6cya233sr333/Ptddey+23386RI0ca9DxFRERExH+ojysiUjOGaZqmtxshIuKP7rjjDt5++22CgoI8lj/wwAM8+uijGIbBpEmTmDt3btW6gQMH0qdPH+bMmcMrr7zCAw88wP79+wkNDQXgs88+4/rrr+fgwYPExsbSunVrfvWrX/Hkk0+esQ2GYfDII4/wxBNPAFBQUEBYWBifffaZ6pCJiIiISK2pjysiUndU41ZExIuuvPJKj04rQFRUVNX8oEGDPNYNGjSIlJQUALZv386ll15a1aEFGDx4MG63m507d2IYBgcPHmTkyJHnbMMll1xSNR8aGkpYWBg5OTkXekoiIiIi4ufUxxURqRsKbkVEvCg0NLTa17rOxzAMAEzTrJo/03uCg4NrtD+n01ltW7fbXas2iYiIiIhUUh9XRKRuqMatiIgPW7t2bbXXXbp0AaBbt26kpKRQUFBQtX716tXYbDY6depEWFgYbdu25auvvmrQNouIiIiInIv6uCIiNaMRtyIiXlRSUkJWVpbHMofDQXR0NAALFiygX79+DBkyhHfeeYd169bx2muvAXD77bfz2GOPMXHiRGbMmMGhQ4e47777GD9+PLGxsQDMmDGDSZMmERMTw5gxY8jPz2f16tXcd999DXuiIiIiIuI31McVEakbCm5FRLzoiy++ID4+3mNZ586d2bFjB2A9Dffdd99l8uTJxMXF8c4779CtWzcAQkJCWLRoEVOmTKF///6EhIRw880389xzz1Xta+LEiRQXF/P888/z+9//nujoaG655ZaGO0ERERER8Tvq44qI1A3DNE3T240QEZHqDMPg/fff58Ybb/R2U0RERERE6oT6uCIiNacatyIiIiIiIiIiIiI+RsGtiIiIiIiIiIiIiI9RqQQRERERERERERERH6MRtyIiIiIiIiIiIiI+RsGtiIiIiIiIiIiIiI9RcCsiIiIiIiIiIiLiYxTcioiIiIiIiIiIiPgYBbciIiIiIiIiIiIiPkbBrYiIiIiIiIiIiIiPUXArIiIiIiIiIiIi4mMU3IqIiIiIiIiIiIj4GAW3IiIiIiIiIiIiIj7m/wO9D+CNNgaiYAAAAABJRU5ErkJggg==","text/plain":["<Figure size 1400x600 with 2 Axes>"]},"metadata":{},"output_type":"display_data"},{"name":"stdout","output_type":"stream","text":["--- History Plotting complete ---\n"]}],"execution_count":12},{"cell_type":"code","source":"# Cell 12: Evaluate the Best Model\n# =================================\nprint(\"\\n--- Evaluating Best Model ---\")\nbest_model = None\nif os.path.exists(MODEL_CHECKPOINT_PATH):\n    print(f\"Loading best model saved during training from: {MODEL_CHECKPOINT_PATH}\")\n    try:\n        # Load the entire model saved by ModelCheckpoint during fine-tuning\n        best_model = load_model(MODEL_CHECKPOINT_PATH)\n        print(\"Best model loaded successfully.\")\n    except Exception as e:\n        print(f\"ERROR: Could not load best model from {MODEL_CHECKPOINT_PATH}. Error: {e}\")\nelse:\n    print(f\"ERROR: Checkpoint file not found at {MODEL_CHECKPOINT_PATH}. Cannot evaluate the best model.\")\n    print(\"You might need to re-run training or check the MODEL_SAVE_DIR path.\")\n\n# --- Evaluation ---\n# Evaluate on the DEDICATED test_generator now\nif best_model and test_generator:\n    print(\"\\nEvaluating best model on the dedicated test set...\")\n    start_time = time.time()\n    # Calculate steps to cover the entire test set\n    test_steps = np.ceil(test_generator.samples / BATCH_SIZE)\n    test_loss, test_accuracy = best_model.evaluate(test_generator, steps=test_steps)\n    end_time = time.time()\n    print(f\"Evaluation completed in {end_time - start_time:.2f} seconds.\")\n    print(f\"\\nTest Loss (Best Model): {test_loss:.4f}\")\n    print(f\"Test Accuracy (Best Model): {test_accuracy:.4f}\")\n\n    # --- Detailed Report and Confusion Matrix ---\n    print(\"\\nGenerating predictions for detailed report...\")\n    test_generator.reset() # IMPORTANT: Reset generator before predicting\n    start_time = time.time()\n    # Use enough steps to predict on all test samples\n    y_pred_probs = best_model.predict(test_generator, steps=test_steps)\n    end_time = time.time()\n    print(f\"Predictions generated in {end_time - start_time:.2f} seconds.\")\n\n    # Ensure lengths match - Get true labels from the test generator\n    num_samples = test_generator.samples\n    y_true = test_generator.classes[:num_samples] # Get true classes in order\n    y_pred_probs = y_pred_probs[:num_samples] # Trim if predict generated extra\n    y_pred_classes = np.argmax(y_pred_probs, axis=1)\n\n    print(f\"Length of y_true (test set): {len(y_true)}\")\n    print(f\"Length of y_pred_classes (test set): {len(y_pred_classes)}\")\n\n    if len(y_true) == len(y_pred_classes):\n        print(\"\\nClassification Report (Best Model on Test Set):\")\n        # Use the class_names defined in config\n        print(classification_report(y_true, y_pred_classes, target_names=class_names, zero_division=0))\n\n        print(\"\\nConfusion Matrix (Best Model on Test Set):\")\n        cm = confusion_matrix(y_true, y_pred_classes)\n        plt.figure(figsize=(10, 8))\n        sns.heatmap(cm, annot=True, fmt='d', cmap='Blues',\n                    xticklabels=class_names, yticklabels=class_names)\n        plt.title(\"Confusion Matrix (Best Model on Test Set)\")\n        plt.xlabel(\"Predicted Label\")\n        plt.ylabel(\"True Label\")\n        plt.show()\n    else:\n        print(f\"ERROR: Length mismatch between true labels ({len(y_true)}) and predicted labels ({len(y_pred_classes)}). Cannot generate report/matrix.\")\n\nelse:\n    print(\"\\nBest model or Test generator not available. Skipping evaluation.\")\n\nprint(\"--- Evaluation complete ---\")","metadata":{"id":"v5DqwoPFk5MJ"},"outputs":[{"name":"stdout","output_type":"stream","text":["\n","--- Evaluating Best Model ---\n","Loading best model saved during training from: D:/adni_traininhig\\resnet50v2_adni_best.keras\n","Best model loaded successfully.\n","\n","Evaluating best model on the test set (which is the validation split here)...\n","127/127 [==============================] - 8s 55ms/step - loss: 0.2927 - accuracy: 0.7778\n","Evaluation completed in 7.70 seconds.\n","\n","Test Loss (Best Model): 0.2927\n","Test Accuracy (Best Model): 0.7778\n","\n","Generating predictions for detailed report...\n","127/127 [==============================] - 8s 54ms/step\n","Predictions generated in 7.67 seconds.\n","Length of y_true: 4051\n","Length of y_pred_classes: 4051\n","\n","Classification Report (Best Model):\n","              precision    recall  f1-score   support\n","\n","          CN       0.44      0.43      0.43       795\n","         MCI       1.00      1.00      1.00       820\n","        EMCI       1.00      0.99      1.00       797\n","        LMCI       1.00      1.00      1.00       809\n","          AD       0.46      0.47      0.47       830\n","\n","    accuracy                           0.78      4051\n","   macro avg       0.78      0.78      0.78      4051\n","weighted avg       0.78      0.78      0.78      4051\n","\n","\n","Confusion Matrix (Best Model):\n"]},{"data":{"image/png":"","text/plain":["<Figure size 1000x800 with 2 Axes>"]},"metadata":{},"output_type":"display_data"},{"name":"stdout","output_type":"stream","text":["--- Evaluation complete ---\n"]}],"execution_count":13},{"cell_type":"code","source":"# Cell 13: Single Image Prediction Test\n# ======================================\nprint(\"\\n--- Single Image Prediction Test ---\")\n\n# Modified function to use rescaling consistent with generators\ndef predict_single_image_rescaled(image_path, model_to_use, class_map=diagnosis_mapping, target_size=IMG_SIZE):\n    \"\"\"Preprocesses (resize, BGR->RGB, rescale) and predicts.\"\"\"\n    print(f\"Predicting image: {image_path}\")\n    if not os.path.exists(image_path):\n        print(f\"Error: Image path does not exist: {image_path}\")\n        return None\n    try:\n        img = cv2.imread(str(image_path))\n        if img is None:\n            return None\n        img = cv2.resize(img, target_size)\n        img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\n        img = img.astype(np.float32) * (1./255) # Apply rescaling like generator\n\n        img_batch = np.expand_dims(img, axis=0) # Add batch dimension\n\n        predictions = model_to_use.predict(img_batch)\n        predicted_class_index = np.argmax(predictions[0])\n        confidence = predictions[0][predicted_class_index]\n        predicted_class_name = class_map.get(predicted_class_index, \"Unknown\")\n        probabilities = {class_map.get(i, \"Unknown\"): prob for i, prob in enumerate(predictions[0])}\n        return {\n            'predicted_class': predicted_class_name,\n            'confidence': confidence,\n            'probabilities': probabilities,\n            'preprocessed_image': img # Return the rescaled image\n        }\n    except Exception as e:\n        print(f\"Error during prediction or preprocessing: {e}\")\n        return None\n\n# --- Test Prediction ---\nif df_test is not None and not df_test.empty and best_model: # Use df_test now\n    # Select a sample image path from the test set\n    sample_idx_in_df_test = 50 # Example index within df_test\n    if sample_idx_in_df_test < len(df_test):\n        sample_image_path = df_test['image_path'].iloc[sample_idx_in_df_test]\n        true_label_name = df_test['class_name'].iloc[sample_idx_in_df_test]\n        print(f\"Selected sample image from test dataframe: {sample_image_path}\")\n        print(f\"True Label: {true_label_name}\")\n    else:\n         print(f\"Warning: Sample index {sample_idx_in_df_test} out of bounds for test dataframe.\")\n         sample_image_path = None # Indicate failure\n\n    if sample_image_path:\n        # Use the loaded best_model for prediction\n        start_time = time.time()\n        # Use the modified prediction function\n        result = predict_single_image_rescaled(sample_image_path, best_model)\n        end_time = time.time()\n        print(f\"Single prediction took {end_time - start_time:.4f} seconds.\")\n\n        if result:\n            print(f\"\\nPredicted Class: {result['predicted_class']}\")\n            print(f\"Confidence: {result['confidence']:.4f}\")\n            print(\"\\nClass Probabilities:\")\n            for class_name, prob in sorted(result['probabilities'].items(), key=lambda item: item[1], reverse=True):\n                print(f\"  {class_name}: {prob:.4f}\")\n\n            # Display original and preprocessed image\n            plt.figure(figsize=(12, 5))\n            plt.subplot(1, 2, 1)\n            try:\n                orig_img = cv2.imread(sample_image_path)\n                orig_img = cv2.cvtColor(orig_img, cv2.COLOR_BGR2RGB)\n                plt.imshow(orig_img)\n                plt.title(f\"Original Image\\nTrue: {true_label_name}\")\n                plt.axis('off')\n            except Exception as e:\n                print(f\"Could not display original image: {e}\")\n\n            plt.subplot(1, 2, 2)\n            # Display the preprocessed image (should be 0-1 float now)\n            plt.imshow(result['preprocessed_image'])\n            plt.title(f\"Preprocessed Image (Rescaled)\\nPredicted: {result['predicted_class']}\")\n            plt.axis('off')\n            plt.tight_layout()\n            plt.show()\n        else:\n            print(\"Prediction failed for the sample image.\")\nelse:\n    print(\"Test DataFrame 'df_test', or best_model not available. Cannot perform prediction test.\")\n\nprint(\"--- Single Image Prediction complete ---\")","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Cell 14: Interactive Single Image Prediction Test\n# ==================================================\nprint(\"\\n--- Interactive Single Image Prediction Test ---\")\n\n# Prompt the user for the image path\n# Example path format (Windows): D:/adni_traininhig/ADNI_IMAGES/png_images/CN/CN-0004.png\n# Example path format (Linux/Colab): /content/ADNI_IMAGES/png_images/CN/CN-0004.png\nuser_image_path = input(\"Enter the full path to an ADNI image: \")\n\nif best_model:\n    # Use the rescaled prediction function\n    result = predict_single_image_rescaled(user_image_path, best_model)\n\n    if result:\n        print(f\"\\nPredicted Class: {result['predicted_class']}\")\n        print(f\"Confidence: {result['confidence']:.4f}\")\n        print(\"\\nClass Probabilities:\")\n        for class_name, prob in sorted(result['probabilities'].items(), key=lambda item: item[1], reverse=True):\n            print(f\"  {class_name}: {prob:.4f}\")\n\n        # Display original and preprocessed image\n        plt.figure(figsize=(12, 5))\n        plt.subplot(1, 2, 1)\n        try:\n            orig_img = cv2.imread(user_image_path)\n            if orig_img is not None:\n                orig_img = cv2.cvtColor(orig_img, cv2.COLOR_BGR2RGB)\n                plt.imshow(orig_img)\n                plt.title(\"Original Image\")\n                plt.axis('off')\n            else:\n                print(f\"Could not read original image at: {user_image_path}\")\n                plt.title(\"Original Image (Load Failed)\")\n                plt.axis('off')\n        except Exception as e:\n            print(f\"Could not display original image: {e}\")\n            plt.title(\"Original Image (Error)\")\n            plt.axis('off')\n\n        plt.subplot(1, 2, 2)\n        plt.imshow(result['preprocessed_image'])\n        plt.title(f\"Preprocessed Image\\nPredicted: {result['predicted_class']}\")\n        plt.axis('off')\n        plt.tight_layout()\n        plt.show()\n    else:\n        print(\"Prediction failed for the input image.\")\nelse:\n    print(\"Best model not loaded. Cannot perform interactive prediction.\")\n\nprint(\"--- Interactive Single Image Prediction complete ---\")","metadata":{},"outputs":[{"name":"stdout","output_type":"stream","text":["\n","--- Interactive Single Image Prediction Test ---\n","Predicting image: AD\n","Error: Image path does not exist: AD\n","Prediction failed for the input image.\n","--- Interactive Single Image Prediction complete ---\n"]}],"execution_count":20}]}